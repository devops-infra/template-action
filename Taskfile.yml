version: '3'

silent: true

includes:
  variables: ./Taskfile.variables.yml
  scripts: ./Taskfile.scripts.yml

tasks:
  default:
    desc: List tasks
    cmds:
      - task help

  help:
    desc: Detailed help
    cmds:
      - task: scripts:help

  pre-commit:
    desc: Run all pre-commit hooks
    cmds:
      - pre-commit run --all-files

  lint:
    desc: Run all linters (Dockerfile, shell scripts, workflows, YAML)
    cmds:
      - task: lint:action
      - task: lint:docker
      - task: lint:shell
      - task: lint:yaml

  lint:action:
    desc: Lint GitHub Actions workflows with actionlint
    cmds:
      - task: scripts:lint:action

  lint:docker:
    desc: Lint Dockerfile with hadolint
    cmds:
      - task: scripts:lint:docker

  lint:shell:
    desc: Lint shell scripts with shellcheck
    cmds:
      - task: scripts:lint:shell

  lint:yaml:
    desc: Lint YAML files with yamllint
    cmds:
      - task: scripts:lint:yaml

  docker:login:
    desc: Login to hub.docker.com and ghcr.io
    internal: true
    env:
      DOCKER_USERNAME: '{{.DOCKER_USERNAME}}'
      GITHUB_USERNAME: '{{.GITHUB_USERNAME}}'
    cmds:
      - echo "Logging into Docker Hub as {{.DOCKER_USERNAME}}"
      - echo "${DOCKER_TOKEN}" | docker login -u "{{.DOCKER_USERNAME}}" --password-stdin
      - echo "Logging into GHCR as {{.GITHUB_USERNAME}}"
      - echo "${GITHUB_TOKEN}" | docker login ghcr.io -u "{{.GITHUB_USERNAME}}" --password-stdin

  docker:build:
    desc: Build Docker image
    cmds:
      - '{{.DOCKER_BUILD_START}} {{.DOCKER_BUILD_FINISH}}'
      - |
        image_inspect_out=$(docker image inspect {{.DOCKER_NAME}}:{{.VERSION_FULL}}{{.VERSION_SUFFIX}} | jq -r)
        if [ -z "$image_inspect_out" ]; then
          echo "❌ Docker build failed: Image not found"
          exit 1
        else
          echo -e "\nDocker image inspect:"
          echo "$image_inspect_out" | jq
        fi


  docker:push:
    desc: Build and push Docker images
    deps:
      - task: docker:login
    cmds:
      - '{{.DOCKER_BUILD_START}} --push {{.DOCKER_BUILD_FINISH}}'
      - |
        image_inspect_out=$(docker image inspect {{.DOCKER_NAME}}:{{.VERSION_FULL}}{{.VERSION_SUFFIX}} | jq -r)
        if [ -z "$image_inspect_out" ]; then
          echo "❌ Docker build failed: Image not found"
          exit 1
        else
          echo -e "\nDocker image inspect:"
          echo "$image_inspect_out" | jq
          image_sha=$(echo "$image_inspect_out" | jq -r '.[0].Id')
          echo -e "\nDocker manifest inspect:"
          docker manifest inspect "{{.DOCKER_NAME}}:{{.VERSION_FULL}}{{.VERSION_SUFFIX}}@$image_sha" | jq
        fi

  version:set:
    desc: Update version in README.md and action.yml to specified VERSION
    cmds:
      - task: scripts:version:set

  version:tag-release:
    desc: Create set of git tags
    cmds:
      - task: scripts:version:tag-release

  version:update:patch:
    desc: Increment patch version (e.g., 1.2.3 -> 1.2.4)
    cmds:
      - task version:set VERSION=v{{.MAJOR}}.{{.MINOR}}.{{.NEXT_PATCH}}

  version:update:minor:
    desc: Increment minor version (e.g., 1.2.3 -> 1.3.0)
    cmds:
      - task version:set VERSION=v{{.MAJOR}}.{{.NEXT_MINOR}}.0

  version:update:major:
    desc: Increment major version (e.g., 1.2.3 -> 2.0.0)
    cmds:
      - task version:set VERSION=v{{.NEXT_MAJOR}}.0.0
